# ScrollNet Development Rules

## Project Overview
ScrollNet is a gamified video feedback and evaluation platform that integrates AI and gaming technologies for content optimization.

## Code Style and Standards
- Use ES6+ syntax with async/await for asynchronous operations
- Follow camelCase for variables and functions
- Use PascalCase for classes and constructors
- Add comprehensive error handling with try-catch blocks
- Include JSDoc comments for all functions and classes
- Use meaningful variable and function names

## File Structure Guidelines
- Keep API integrations in separate files (inworld.js, mistral.js)
- Separate business logic into focused modules
- Use /src directory for all source code
- Store configuration in .env file
- Keep tests in /tests directory

## AI Integration Standards
- Always handle API failures gracefully
- Implement rate limiting for API calls
- Use environment variables for API keys and secrets
- Add logging for all AI model interactions
- Implement retry logic for network requests

## Security Best Practices
- Never commit API keys or secrets to version control
- Use .env files for sensitive configuration
- Validate all user inputs
- Implement proper authentication and authorization
- Use HTTPS for all external API calls

## Testing Requirements
- Write unit tests for all core functions
- Mock external API calls in tests
- Test error handling scenarios
- Include integration tests for AI workflows

## Documentation Standards
- Update README.md with setup instructions
- Document all API endpoints and responses
- Include examples for common use cases
- Maintain changelog for version updates

## Git Workflow
- Use feature branches for new functionality
- Write descriptive commit messages
- Include issue references in commits
- Review code before merging to main branch

## Documentation & Clarity Maintenance
- **UPDATE ALL DOCUMENTATION** at every development step, especially .cursor/rules & .cursor/docs.md
- Maintain PROJECT_PLAN.md with current phase status and progress
- Update README.md immediately when adding new features or setup requirements
- Keep .cursor/docs.md current with any architecture changes
- Document all API changes and new endpoints in real-time
- Update technical specifications when making architectural decisions
- Ensure all team members can understand current project status from documentation alone
- Create clear, descriptive commit messages that explain the "why" not just the "what"
- Update phase completion status in PROJECT_PLAN.md as work progresses

## Phase-Based Development Requirements
- **STRICTLY FOLLOW** the defined phase structure in PROJECT_PLAN.md
- No feature should be implemented outside of its designated phase
- Each phase must be fully completed and documented before moving to the next
- **MVP (Phase 1) RESTRICTIONS**: Focus ONLY on core functionality - NO AI integrations
- Document phase completion criteria and ensure all criteria are met
- Update PROJECT_PLAN.md phase status with each significant change
- Phase 1 (MVP) must include: user auth, video feed from DB, reactions, feedback every 5 videos
- Admin panels and tester panels are NOT part of MVP - reserved for Phase 5
- AI integrations (Inworld, Mistral) are NOT part of MVP - reserved for Phase 3+ 