import { DataChunk, InworldPacket as ProtoPacket } from '../../../proto/ai/inworld/packets/packets_pb';
import { ItemsInEntitiesOperationType, PerceivedLatencyReportProps, SendAudioSessionStartPacketParams, SendCustomPacketParams, SendPacketParams, SessionControlProps } from '../common/data_structures';
import { Character } from '../entities/character.entity';
import { EntityItem } from '../entities/entities/entity_item';
import { InworldPacket } from '../entities/packets/inworld_packet.entity';
export interface SendCancelResponsePacketParams {
    interactionId?: string;
    utteranceId?: string[];
    character: Character;
}
export declare class EventFactory {
    private character;
    private characters;
    getCurrentCharacter(): Character;
    setCurrentCharacter(character: Character): void;
    setCharacters(characters: Character[]): void;
    getCharacters(): Character[];
    dataChunk(chunk: string, type: DataChunk.DataType, params: SendPacketParams): ProtoPacket;
    audioSessionStart(params: SendAudioSessionStartPacketParams): ProtoPacket;
    audioSessionEnd(params: SendPacketParams): ProtoPacket;
    pong(initialPacket: ProtoPacket): ProtoPacket;
    perceivedLatencyWithTypeDetection({ sent, received, }: {
        sent: InworldPacket;
        received: InworldPacket;
    }): ProtoPacket;
    perceivedLatency({ precision, interactionId, startDate, endDate, }: PerceivedLatencyReportProps): ProtoPacket;
    mutePlayback(isMuted: boolean, params: SendPacketParams): ProtoPacket;
    text(text: string, params: SendPacketParams): ProtoPacket;
    trigger(name: string, params: SendCustomPacketParams): ProtoPacket;
    cancelResponse(params: SendCancelResponsePacketParams): ProtoPacket;
    narratedAction(content: string, params: SendPacketParams): ProtoPacket;
    static conversation(participants: string[], params: SendPacketParams): ProtoPacket;
    static sessionControl(props: SessionControlProps): ProtoPacket;
    static loadScene(name: string): ProtoPacket;
    static loadCharacters(names: string[]): ProtoPacket;
    static unloadCharacters(ids: string[]): ProtoPacket;
    static createOrUpdateItems(props: {
        items: EntityItem[];
        addToEntities: string[];
    }): ProtoPacket;
    static removeItems(ids: string[]): ProtoPacket;
    static itemsInEntities(props: {
        type: ItemsInEntitiesOperationType;
        itemIds: string[];
        entityNames: string[];
    }): ProtoPacket;
    baseProtoPacket(props?: {
        utteranceId?: boolean;
        interactionId?: boolean;
        correlationId?: boolean;
        conversationId?: string;
    }): ProtoPacket;
    private audioSession;
    private customEvent;
    private routing;
    private static worldRouting;
}
