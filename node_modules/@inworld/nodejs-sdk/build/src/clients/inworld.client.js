"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InworldClient = void 0;
const world_engine_pb_1 = require("../../../proto/ai/inworld/engine/world-engine_pb");
const errors_1 = require("../common/errors");
const logger_1 = require("../common/logger");
const session_continuation_entity_1 = require("../entities/continuation/session_continuation.entity");
const scene_1 = require("../guard/scene");
const connection_service_1 = require("../services/connection.service");
const inworld_connection_service_1 = require("../services/inworld_connection.service");
class InworldClient {
    constructor() {
        this.scene = '';
        this.config = {};
        this.logger = logger_1.Logger.getInstance();
        this.logError = (err) => {
            this.logger.error(err);
        };
        this.onError = (err) => {
            this.logError(err);
            console.error(err);
        };
    }
    setApiKey(apiKey) {
        this.apiKey = apiKey;
        return this;
    }
    setUser(user) {
        this.user = user;
        return this;
    }
    setClient(client) {
        this.client = new world_engine_pb_1.ClientRequest().setId(client.id);
        return this;
    }
    setConfiguration(config) {
        this.config = config;
        const { capabilities } = this.config;
        if ((capabilities === null || capabilities === void 0 ? void 0 : capabilities.logs) !== undefined) {
            console.warn('logs capability is deprecated. Please use logsDebug, logsInfo, logsWarning instead');
        }
        return this;
    }
    setScene(name) {
        this.scene = name;
        return this;
    }
    setOnDisconnect(fn) {
        this.onDisconnect = fn;
        return this;
    }
    setOnError(fn) {
        this.onError = (err) => __awaiter(this, void 0, void 0, function* () {
            this.logError(err);
            yield fn(err);
        });
        return this;
    }
    setOnMessage(fn) {
        this.onMessage = fn;
        return this;
    }
    setGenerateSessionToken(generateSessionToken) {
        this.generateSessionTokenFn = generateSessionToken;
        return this;
    }
    setOnSession(props) {
        this.sessionGetterSetter = props;
        return this;
    }
    setExtension(extension) {
        this.extension = extension;
        return this;
    }
    setSessionContinuation(sessionContinuation) {
        this.sessionContinuation = new session_continuation_entity_1.SessionContinuation(sessionContinuation);
        return this;
    }
    generateSessionToken() {
        return __awaiter(this, void 0, void 0, function* () {
            this.validate();
            return new connection_service_1.ConnectionService({
                apiKey: this.apiKey,
                name: this.scene,
                onError: this.onError,
            }).generateSessionToken();
        });
    }
    build() {
        this.validate();
        const connection = new connection_service_1.ConnectionService({
            apiKey: this.apiKey,
            name: this.scene,
            user: this.user,
            client: this.client,
            config: this.config,
            onError: this.onError,
            onMessage: this.onMessage,
            onDisconnect: this.onDisconnect,
            generateSessionToken: this.generateSessionTokenFn,
            sessionGetterSetter: this.sessionGetterSetter,
            sessionContinuation: this.sessionContinuation,
            extension: this.extension,
        });
        return new inworld_connection_service_1.InworldConnectionService(connection);
    }
    validateApiKey() {
        var _a;
        if (!((_a = this.apiKey) === null || _a === void 0 ? void 0 : _a.key) || !this.apiKey.secret) {
            throw Error('Api key is required');
        }
    }
    validateScene() {
        if (!this.scene) {
            throw Error('Scene name is required');
        }
        if (!(0, scene_1.sceneHasValidFormat)(this.scene)) {
            throw Error(errors_1.SCENE_HAS_INVALID_FORMAT);
        }
    }
    validate() {
        if (!this.generateSessionTokenFn) {
            this.validateApiKey();
        }
        this.validateScene();
    }
}
exports.InworldClient = InworldClient;
