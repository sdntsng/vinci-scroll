"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculateTimeDifference = exports.deserializeGrpcStatusDetails = exports.grpcOptions = exports.protoTimestamp = void 0;
const status_pb_1 = require("../../../proto/ai/inworld/common/status_pb");
const status_pb_2 = require("../../../proto/google/rpc/status_pb");
const duration_pb_1 = require("google-protobuf/google/protobuf/duration_pb");
const timestamp_pb_1 = require("google-protobuf/google/protobuf/timestamp_pb");
const { version } = require('../../../package.json');
const protoTimestamp = (date) => {
    const timestamp = new timestamp_pb_1.Timestamp();
    timestamp.fromDate(date ? date : new Date());
    return timestamp;
};
exports.protoTimestamp = protoTimestamp;
exports.grpcOptions = {
    'grpc.primary_user_agent': `inworld-nodejs-sdk/${version}`,
};
const deserializeGrpcStatusDetails = (error) => {
    var _a, _b;
    const buffer = (_b = (_a = error.metadata) === null || _a === void 0 ? void 0 : _a.get('grpc-status-details-bin')) === null || _b === void 0 ? void 0 : _b[0];
    if (!buffer || typeof buffer === 'string') {
        return null;
    }
    const status = status_pb_2.Status.deserializeBinary(buffer);
    const details = status
        .getDetailsList()
        .map((detail) => detail.unpack(status_pb_1.InworldStatus.deserializeBinary, detail.getTypeName()))
        .filter((detail) => detail !== null && detail !== undefined);
    return {
        status,
        details,
    };
};
exports.deserializeGrpcStatusDetails = deserializeGrpcStatusDetails;
const calculateTimeDifference = (from, to) => {
    const duration = new duration_pb_1.Duration();
    duration.setSeconds(to.getSeconds() - from.getSeconds());
    duration.setNanos(to.getNanos() - from.getNanos());
    if (duration.getSeconds() < 0 && duration.getNanos() > 0) {
        duration.setSeconds(duration.getSeconds() + 1);
        duration.setNanos(duration.getNanos() - 1000000000);
    }
    else if (duration.getSeconds() > 0 && duration.getNanos() < 0) {
        duration.setSeconds(duration.getSeconds() - 1);
        duration.setNanos(duration.getNanos() + 1000000000);
    }
    return duration;
};
exports.calculateTimeDifference = calculateTimeDifference;
