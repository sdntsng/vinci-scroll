"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityService = void 0;
const entity_item_1 = require("../entities/entities/entity_item");
const event_1 = require("../factories/event");
class EntityService {
    constructor(connection) {
        this.connection = connection;
    }
    createOrUpdateItems(props) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.connection.send(() => event_1.EventFactory.createOrUpdateItems({
                items: props.items.map((item) => new entity_item_1.EntityItem(item)),
                addToEntities: props.addToEntities,
            }));
        });
    }
    removeItems(ids) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.connection.send(() => event_1.EventFactory.removeItems(ids));
        });
    }
    itemsInEntities(props) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.connection.send(() => event_1.EventFactory.itemsInEntities(props));
        });
    }
}
exports.EntityService = EntityService;
