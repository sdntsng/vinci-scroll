import { ClientDuplexStream } from '@grpc/grpc-js';
import { CapabilitiesConfiguration } from '../../../../proto/ai/inworld/engine/configuration/configuration_pb';
import { AccessToken, ClientRequest } from '../../../../proto/ai/inworld/engine/world-engine_pb';
import { CurrentSceneStatus, InworldPacket as ProtoPacket } from '../../../../proto/ai/inworld/packets/packets_pb';
import { ApiKey, Awaitable, InternalClientConfiguration, User } from '../../common/data_structures';
import { Extension } from '../../common/data_structures/extension';
import { SessionContinuation } from '../../entities/continuation/session_continuation.entity';
import { InworldError } from '../../entities/error.entity';
import { InworldPacket } from '../../entities/packets/inworld_packet.entity';
import { SessionToken } from '../../entities/session_token.entity';
export interface OpenSessionProps<InworldPacketT extends InworldPacket = InworldPacket> {
    name: string;
    client?: ClientRequest;
    user?: User;
    sessionToken: SessionToken;
    sessionContinuation?: SessionContinuation;
    config: InternalClientConfiguration;
    extension: Extension<InworldPacketT>;
    onDisconnect?: () => Awaitable<void>;
    onError?: (err: InworldError) => Awaitable<void>;
    onMessage: (message: ProtoPacket) => Awaitable<void>;
}
export interface ReopenSessionProps {
    sessionToken: SessionToken;
    onDisconnect?: () => Awaitable<void>;
    onError?: (err: InworldError) => Awaitable<void>;
    onMessage: (message: ProtoPacket) => Awaitable<void>;
}
interface UpdateSessionProps<InworldPacketT extends InworldPacket = InworldPacket> {
    sessionToken: SessionToken;
    connection: ClientDuplexStream<ProtoPacket, ProtoPacket>;
    name?: string;
    extension: Extension<InworldPacketT>;
    gameSessionId?: string;
    capabilities?: CapabilitiesConfiguration;
    sessionContinuation?: SessionContinuation;
    onMessage: (message: ProtoPacket) => Awaitable<void>;
}
export declare class WorldEngineClientGrpcService<InworldPacketT extends InworldPacket = InworldPacket> {
    private readonly config;
    private readonly address;
    private readonly ssl;
    private readonly grpcOptions;
    private readonly client;
    private logger;
    generateSessionToken(apiKey: ApiKey, scene: string): Promise<AccessToken>;
    openSession(props: OpenSessionProps<InworldPacketT>): Promise<[
        ClientDuplexStream<ProtoPacket, ProtoPacket>,
        CurrentSceneStatus
    ]>;
    reopenSession(props: ReopenSessionProps): ClientDuplexStream<ProtoPacket, ProtoPacket>;
    updateSession(props: UpdateSessionProps<InworldPacketT>): Promise<[
        ClientDuplexStream<ProtoPacket, ProtoPacket>,
        CurrentSceneStatus
    ]> | [];
    private onLoad;
    private getMetadata;
    private getClient;
    private getUserConfiguration;
    private getContinuation;
    private writeInitialPackets;
}
export {};
