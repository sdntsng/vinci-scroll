import { InworldPacket as ProtoPacket } from '../../../proto/ai/inworld/packets/packets_pb';
import { AudioSessionStartPacketParams, CancelResponsesProps, PerceivedLatencyReportProps, SendPacketParams, TriggerParameter } from '../common/data_structures';
import { ConvesationInterface } from '../common/data_structures/extension';
import { Character } from '../entities/character.entity';
import { InworldPacket } from '../entities/packets/inworld_packet.entity';
import { ConnectionService } from './connection.service';
export interface PacketQueueItem<InworldPacketT extends InworldPacket = InworldPacket> {
    getPacket: () => ProtoPacket;
    afterWriting: (packet: InworldPacketT) => void;
}
export declare class ConversationService<InworldPacketT extends InworldPacket = InworldPacket> implements ConvesationInterface<InworldPacketT> {
    private connection;
    private conversationId;
    private participants;
    private addCharacters?;
    private packetQueue;
    constructor(connection: ConnectionService<InworldPacketT>, { participants, conversationId, addCharacters, }: {
        participants: string[];
        conversationId?: string;
        addCharacters: (names: string[]) => Promise<void>;
    });
    getConversationId(): string;
    getParticipants(): string[];
    getCharacters(): Character[];
    changeParticipants(participants: string[]): void;
    updateParticipants(participants: string[]): Promise<InworldPacketT>;
    sendText(text: string): Promise<InworldPacketT>;
    sendAudio(chunk: string): Promise<InworldPacketT>;
    sendTrigger(name: string, parameters?: {
        parameters?: TriggerParameter[];
        character?: Character;
    }): Promise<InworldPacketT>;
    sendAudioSessionStart(params?: AudioSessionStartPacketParams): Promise<InworldPacketT>;
    sendAudioSessionEnd(): Promise<InworldPacketT>;
    sendCancelResponse(cancelResponses?: CancelResponsesProps): Promise<InworldPacketT>;
    sendTTSPlaybackMute(isMuted: boolean): Promise<InworldPacketT>;
    sendNarratedAction(text: string): Promise<InworldPacketT>;
    sendCustomPacket(getPacket: (params: SendPacketParams) => ProtoPacket): Promise<InworldPacketT>;
    sendPerceivedLatenctReport(props: PerceivedLatencyReportProps): Promise<InworldPacketT>;
    private ensureConversation;
    private resolveInterval;
    private releaseQueue;
    private getCharacterParticipants;
}
