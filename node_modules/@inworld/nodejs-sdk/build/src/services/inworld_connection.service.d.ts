import { InworldPacket as ProtoPacket } from '../../../proto/ai/inworld/packets/packets_pb';
import { AudioSessionStartPacketParams, CancelResponsesProps, ChangeSceneProps, PerceivedLatencyReportProps, TriggerParameter } from '../common/data_structures';
import { Character } from '../entities/character.entity';
import { InworldPacket } from '../entities/packets/inworld_packet.entity';
import { ConnectionService } from './connection.service';
import { ConversationService } from './conversation.service';
import { EntityService } from './entity.service';
import { FeedbackService } from './feedback.service';
export declare class InworldConnectionService<InworldPacketT extends InworldPacket = InworldPacket> {
    readonly feedback: FeedbackService<InworldPacketT>;
    readonly entity: EntityService<InworldPacketT>;
    private connection;
    private oneToOneConversation;
    private oneToOneConversationIntializeState;
    constructor(connection: ConnectionService<InworldPacketT>);
    getSessionState(): Promise<import("..").SessionState>;
    open(): Promise<void>;
    close(): void;
    isActive(): boolean;
    getCapabilities(): import("../common/data_structures").Capabilities;
    getCharacters(): Promise<Character[]>;
    getCurrentCharacter(): Promise<Character>;
    getCharacterById(id: string): Character;
    getCharacterByResourceName(name: string): Character;
    setCurrentCharacter(character: Character): Promise<void>;
    getCurrentConversation(): Promise<ConversationService<InworldPacketT>>;
    getConversations(): {
        conversationId: string;
        characters: Character[];
    }[];
    sendText(text: string): Promise<InworldPacketT>;
    sendAudio(chunk: string): Promise<InworldPacketT>;
    sendTrigger(name: string, parameters?: TriggerParameter[] | {
        parameters: TriggerParameter[];
    }): Promise<InworldPacketT>;
    sendAudioSessionStart(params?: AudioSessionStartPacketParams): Promise<InworldPacketT>;
    sendAudioSessionEnd(): Promise<InworldPacketT>;
    sendTTSPlaybackMute(isMuted: boolean): Promise<InworldPacketT>;
    sendCancelResponse(cancelResponses?: CancelResponsesProps): Promise<InworldPacketT>;
    sendNarratedAction(text: string): Promise<InworldPacketT>;
    sendPerceivedLatenctReport(props: PerceivedLatencyReportProps): Promise<InworldPacketT>;
    reloadScene(): Promise<void>;
    changeScene(name: string, props?: ChangeSceneProps): Promise<void>;
    addCharacters(names: string[]): Promise<InworldPacketT>;
    removeCharacters(names: string[]): Promise<InworldPacketT>;
    sendCustomPacket(getPacket: () => ProtoPacket): Promise<InworldPacketT>;
    startConversation(participants: string[]): ConversationService<InworldPacketT>;
    baseProtoPacket(props?: {
        utteranceId?: boolean;
        interactionId?: boolean;
        conversationId?: string;
        characters?: Character[];
    }): ProtoPacket;
    markPacketAsHandled(packet: InworldPacketT): void;
    private ensureOneToOneConversation;
    private resolveInterval;
    private addConversationToConnection;
}
