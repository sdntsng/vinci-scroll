"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InworldPacket = void 0;
const packets_pb_1 = require("../../../../proto/ai/inworld/packets/packets_pb");
const data_structures_1 = require("../../common/data_structures");
const character_entity_1 = require("../character.entity");
const item_operation_1 = require("../entities/item_operation");
const audio_entity_1 = require("./audio.entity");
const cancel_responses_entity_1 = require("./cancel_responses.entity");
const control_entity_1 = require("./control.entity");
const emotion_entity_1 = require("./emotion/emotion.entity");
const latency_report_entity_1 = require("./latency/latency_report.entity");
const log_entity_1 = require("./log.entity");
const narrated_action_entity_1 = require("./narrated_action.entity");
const operation_status_entity_1 = require("./operation_status.entity");
const packet_id_entity_1 = require("./packet_id.entity");
const routing_entity_1 = require("./routing.entity");
const silence_entity_1 = require("./silence.entity");
const task_entity_1 = require("./task.entity");
const text_entity_1 = require("./text.entity");
const trigger_entity_1 = require("./trigger.entity");
class InworldPacket {
    constructor(props) {
        this.type = data_structures_1.InworldPacketType.UNKNOWN;
        this.packetId = props.packetId;
        this.routing = props.routing;
        this.date = props.date;
        this.type = props.type;
        this.proto = props.proto.toObject();
        if (this.isText()) {
            this.text = props.text;
        }
        if (this.isAudio()) {
            this.audio = props.audio;
        }
        if (this.isControl()) {
            this.control = props.control;
        }
        if (this.isEmotion()) {
            this.emotions = props.emotions;
        }
        if (this.isLog()) {
            this.log = props.log;
        }
        if (this.isTask()) {
            this.task = props.task;
        }
        if (this.isTrigger()) {
            this.trigger = props.trigger;
        }
        if (this.isSilence()) {
            this.silence = props.silence;
        }
        if (this.isCancelResponse()) {
            this.cancelResponses = props.cancelResponses;
        }
        if (this.isNarratedAction()) {
            this.narratedAction = props.narratedAction;
        }
        if (this.isSceneMutationResponse() || this.isSceneMutationRequest()) {
            this.sceneMutation = props.sceneMutation;
        }
        if (this.isEntitiesItemOperation()) {
            this.entitiesItemsOperation = props.entitiesItemsOperation;
        }
        if (this.isOperationStatus()) {
            this.operationStatus = props.operationStatus;
        }
        if (this.isLatencyReport()) {
            this.latencyReport = props.latencyReport;
        }
    }
    getProto() {
        return this.proto;
    }
    isText() {
        return this.type === data_structures_1.InworldPacketType.TEXT;
    }
    isAudio() {
        return this.type === data_structures_1.InworldPacketType.AUDIO;
    }
    isControl() {
        return this.type === data_structures_1.InworldPacketType.CONTROL;
    }
    isTask() {
        return this.type === data_structures_1.InworldPacketType.TASK;
    }
    isTrigger() {
        return this.type === data_structures_1.InworldPacketType.TRIGGER;
    }
    isEmotion() {
        return this.type === data_structures_1.InworldPacketType.EMOTION;
    }
    isLog() {
        return this.type === data_structures_1.InworldPacketType.LOG;
    }
    isInteractionEnd() {
        return (this.isControl() &&
            this.control.action === data_structures_1.InworlControlAction.INTERACTION_END);
    }
    isTTSPlaybackMute() {
        return (this.isControl() &&
            this.control.action === data_structures_1.InworlControlAction.TTS_PLAYBACK_MUTE);
    }
    isTTSPlaybackUnmute() {
        return (this.isControl() &&
            this.control.action === data_structures_1.InworlControlAction.TTS_PLAYBACK_UNMUTE);
    }
    isWarning() {
        return (this.isControl() && this.control.action === data_structures_1.InworlControlAction.WARNING);
    }
    isSilence() {
        return this.type === data_structures_1.InworldPacketType.SILENCE;
    }
    isCancelResponse() {
        return this.type === data_structures_1.InworldPacketType.CANCEL_RESPONSE;
    }
    isNarratedAction() {
        return this.type === data_structures_1.InworldPacketType.NARRATED_ACTION;
    }
    isSceneMutationRequest() {
        return this.type === data_structures_1.InworldPacketType.SCENE_MUTATION_REQUEST;
    }
    isSceneMutationResponse() {
        return this.type === data_structures_1.InworldPacketType.SCENE_MUTATION_RESPONSE;
    }
    isEntitiesItemOperation() {
        return this.type === data_structures_1.InworldPacketType.ENTITIES_ITEM_OPERATION;
    }
    isOperationStatus() {
        return this.type === data_structures_1.InworldPacketType.OPERATION_STATUS;
    }
    isLatencyReport() {
        return this.type === data_structures_1.InworldPacketType.LATENCY_REPORT;
    }
    isPingPongReport() {
        return this.isLatencyReport() && !!this.latencyReport.pingPong;
    }
    isPerceivedLatencyReport() {
        return this.isLatencyReport() && !!this.latencyReport.perceivedLatency;
    }
    isSpeechRecognitionResult() {
        return (this.isText() &&
            this.routing.source.isPlayer &&
            this.text.final &&
            this.text.type === data_structures_1.InworldTextPacketType.SPEECH_TO_TEXT);
    }
    isPlayerTypeInText() {
        return (this.isText() &&
            this.routing.source.isPlayer &&
            this.text.type === data_structures_1.InworldTextPacketType.TYPED_IN);
    }
    isNonSpeechPacket() {
        return this.isTrigger() || this.isNarratedAction();
    }
    isPushToTalkAudioSessionStart() {
        return (this.isControl() &&
            this.control.action === data_structures_1.InworlControlAction.AUDIO_SESSION_START &&
            this.control.audioSessionStart.mode === data_structures_1.MicrophoneMode.EXPECT_AUDIO_END);
    }
    isAudioSessionEnd() {
        return (this.isControl() &&
            this.control.action === data_structures_1.InworlControlAction.AUDIO_SESSION_END);
    }
    shouldHaveConversationId() {
        return (this.isAudio() ||
            this.isText() ||
            this.isTrigger() ||
            this.isTask() ||
            this.isNarratedAction() ||
            this.isSilence());
    }
    static fromProto(proto) {
        var _a, _b, _c, _d;
        const type = this.getType(proto);
        return new InworldPacket(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ type,
            proto, date: proto.getTimestamp().toDate().toISOString(), packetId: packet_id_entity_1.PacketId.fromProto(proto.getPacketId()), routing: routing_entity_1.Routing.fromProto(proto.getRouting()) }, (type === data_structures_1.InworldPacketType.TRIGGER && {
            trigger: trigger_entity_1.TriggerEvent.fromProto(proto.getCustom()),
        })), (type === data_structures_1.InworldPacketType.TASK && {
            task: task_entity_1.TaskEvent.fromProto(proto.getCustom()),
        })), (type === data_structures_1.InworldPacketType.TEXT && {
            text: text_entity_1.TextEvent.fromProto(proto.getText()),
        })), (type === data_structures_1.InworldPacketType.AUDIO && {
            audio: audio_entity_1.AudioEvent.fromProto(proto.getDataChunk()),
        })), (type === data_structures_1.InworldPacketType.CONTROL && {
            control: control_entity_1.ControlEvent.fromProto(proto.getControl()),
        })), (type === data_structures_1.InworldPacketType.SILENCE && {
            silence: silence_entity_1.SilenceEvent.fromProto(proto.getDataChunk()),
        })), (type === data_structures_1.InworldPacketType.EMOTION && {
            emotions: emotion_entity_1.EmotionEvent.fromProto(proto.getEmotion()),
        })), (type === data_structures_1.InworldPacketType.LOG && {
            log: log_entity_1.LogsEvent.fromProto(proto.getLog()),
        })), (type === data_structures_1.InworldPacketType.LATENCY_REPORT && {
            latencyReport: latency_report_entity_1.LatencyReportEvent.fromProto(proto.getLatencyReport()),
        })), (type === data_structures_1.InworldPacketType.CANCEL_RESPONSE && {
            cancelResponses: cancel_responses_entity_1.CancelResponsesEvent.fromProto(proto.getMutation()),
        })), (type === data_structures_1.InworldPacketType.NARRATED_ACTION && {
            narratedAction: narrated_action_entity_1.NarratedAction.fromProto(proto.getAction()),
        })), (type === data_structures_1.InworldPacketType.ENTITIES_ITEM_OPERATION && {
            entitiesItemsOperation: item_operation_1.ItemOperation.fromProto(proto.getEntitiesItemsOperation()),
        })), (type === data_structures_1.InworldPacketType.OPERATION_STATUS && {
            operationStatus: operation_status_entity_1.OperationStatusEvent.fromProto(proto.getOperationStatus()),
        })), ([
            data_structures_1.InworldPacketType.SCENE_MUTATION_REQUEST,
            data_structures_1.InworldPacketType.SCENE_MUTATION_RESPONSE,
        ].includes(type) && {
            sceneMutation: Object.assign(Object.assign(Object.assign(Object.assign({}, (((_a = proto.getMutation()) === null || _a === void 0 ? void 0 : _a.hasLoadScene()) && {
                name: proto.getMutation().getLoadScene().getName(),
            })), (((_b = proto.getMutation()) === null || _b === void 0 ? void 0 : _b.hasLoadCharacters()) && {
                addedCharacterNames: proto
                    .getMutation()
                    .getLoadCharacters()
                    .getNameList()
                    .map((c) => c.getName()),
            })), (((_c = proto.getMutation()) === null || _c === void 0 ? void 0 : _c.hasUnloadCharacters()) && {
                removedCharacterIds: proto
                    .getMutation()
                    .getUnloadCharacters()
                    .getAgentsList()
                    .map((agent) => agent.getAgentId()),
            })), (((_d = proto.getControl()) === null || _d === void 0 ? void 0 : _d.hasCurrentSceneStatus()) && {
                name: proto.getControl().getCurrentSceneStatus().getSceneName(),
                description: proto
                    .getControl()
                    .getCurrentSceneStatus()
                    .getSceneDescription(),
                displayName: proto
                    .getControl()
                    .getCurrentSceneStatus()
                    .getSceneDisplayName(),
                loadedCharacters: proto
                    .getControl()
                    .getCurrentSceneStatus()
                    .getAgentsList()
                    .map((agent) => character_entity_1.Character.fromProto(agent)),
            })),
        })));
    }
    static getType(packet) {
        var _a, _b, _c, _d, _e, _f;
        switch (true) {
            case !!(((_a = packet.getMutation()) === null || _a === void 0 ? void 0 : _a.getLoadScene()) ||
                ((_b = packet.getMutation()) === null || _b === void 0 ? void 0 : _b.getLoadCharacters()) ||
                ((_c = packet.getMutation()) === null || _c === void 0 ? void 0 : _c.getUnloadCharacters())):
                return data_structures_1.InworldPacketType.SCENE_MUTATION_REQUEST;
            case !!((_d = packet.getControl()) === null || _d === void 0 ? void 0 : _d.getCurrentSceneStatus()):
                return data_structures_1.InworldPacketType.SCENE_MUTATION_RESPONSE;
            case packet.hasText():
                return data_structures_1.InworldPacketType.TEXT;
            case packet.hasDataChunk() &&
                packet.getDataChunk().getType() === packets_pb_1.DataChunk.DataType.AUDIO:
                return data_structures_1.InworldPacketType.AUDIO;
            case packet.hasDataChunk() &&
                packet.getDataChunk().getType() === packets_pb_1.DataChunk.DataType.SILENCE:
                return data_structures_1.InworldPacketType.SILENCE;
            case packet.hasLatencyReport():
                return data_structures_1.InworldPacketType.LATENCY_REPORT;
            case packet.hasCustom() &&
                packet.getCustom().getType() === packets_pb_1.CustomEvent.Type.TASK:
                return data_structures_1.InworldPacketType.TASK;
            case packet.hasCustom():
                return data_structures_1.InworldPacketType.TRIGGER;
            case packet.hasControl():
                return data_structures_1.InworldPacketType.CONTROL;
            case packet.hasEmotion():
                return data_structures_1.InworldPacketType.EMOTION;
            case packet.hasLog():
                return data_structures_1.InworldPacketType.LOG;
            case (_e = packet.getMutation()) === null || _e === void 0 ? void 0 : _e.hasCancelResponses():
                return data_structures_1.InworldPacketType.CANCEL_RESPONSE;
            case (_f = packet.getAction()) === null || _f === void 0 ? void 0 : _f.hasNarratedAction():
                return data_structures_1.InworldPacketType.NARRATED_ACTION;
            case packet.hasEntitiesItemsOperation():
                return data_structures_1.InworldPacketType.ENTITIES_ITEM_OPERATION;
            case packet.hasOperationStatus():
                return data_structures_1.InworldPacketType.OPERATION_STATUS;
            default:
                return data_structures_1.InworldPacketType.UNKNOWN;
        }
    }
}
exports.InworldPacket = InworldPacket;
