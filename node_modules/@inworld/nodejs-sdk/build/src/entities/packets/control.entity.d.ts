import { ControlEvent as ProtoControlEvent } from '../../../../proto/ai/inworld/packets/packets_pb';
import { InworlControlAction, InworldConversationEventType, MicrophoneMode, UnderstandingMode } from '../../common/data_structures';
import { Actor } from './routing.entity';
export interface Conversation {
    type?: InworldConversationEventType;
    participants: Actor[];
}
export interface AudioSessionStart {
    mode?: MicrophoneMode;
    understandingMode?: UnderstandingMode;
}
export declare class ControlEvent {
    readonly action: InworlControlAction;
    readonly audioSessionStart?: AudioSessionStart;
    readonly description: string | undefined;
    readonly conversation: Conversation | undefined;
    constructor({ action, audioSessionStart, description, conversation, }: {
        action: InworlControlAction;
        audioSessionStart?: AudioSessionStart;
        description?: string;
        conversation?: Conversation;
    });
    static fromProto(proto: ProtoControlEvent): ControlEvent;
    private static getControlType;
    private static getConversationType;
    private static getMicrophoneMode;
    private static getUnderstandingMode;
}
