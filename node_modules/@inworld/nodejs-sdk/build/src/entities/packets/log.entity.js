"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogsEvent = void 0;
const packets_pb_1 = require("../../../../proto/ai/inworld/packets/packets_pb");
const data_structures_1 = require("../../common/data_structures");
class LogsEvent {
    constructor({ text, level, metadata, details, }) {
        this.text = text;
        this.level = level;
        this.metadata = metadata;
        if ((details === null || details === void 0 ? void 0 : details.length) >= 0) {
            this.details = details;
        }
    }
    static fromProto(proto) {
        var _a;
        return new LogsEvent({
            text: proto.getText(),
            level: LogsEvent.getLogLevel(proto.getLevel()),
            metadata: Object.fromEntries(proto.getMetadataMap().entries()),
            details: (_a = proto.getDetailsList()) === null || _a === void 0 ? void 0 : _a.map((detail) => {
                var _a;
                return ({
                    text: detail.getText(),
                    detail: (_a = detail.getDetail()) === null || _a === void 0 ? void 0 : _a.toJavaScript(),
                });
            }),
        });
    }
    static getLogLevel(logLevel) {
        switch (logLevel) {
            case packets_pb_1.LogsEvent.LogLevel.WARNING:
                return data_structures_1.LogLevel.WARNING;
            case packets_pb_1.LogsEvent.LogLevel.INFO:
                return data_structures_1.LogLevel.INFO;
            case packets_pb_1.LogsEvent.LogLevel.DEBUG:
                return data_structures_1.LogLevel.DEBUG;
            case packets_pb_1.LogsEvent.LogLevel.INTERNAL:
                return data_structures_1.LogLevel.INTERNAL;
            default:
                return data_structures_1.LogLevel.UNSPECIFIED;
        }
    }
}
exports.LogsEvent = LogsEvent;
