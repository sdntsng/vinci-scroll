import { InworldPacket as ProtoPacket } from '../../../../proto/ai/inworld/packets/packets_pb';
import { InworldPacketType } from '../../common/data_structures';
import { Character } from '../character.entity';
import { ItemOperation } from '../entities/item_operation';
import { AudioEvent } from './audio.entity';
import { CancelResponsesEvent } from './cancel_responses.entity';
import { ControlEvent } from './control.entity';
import { EmotionEvent } from './emotion/emotion.entity';
import { LatencyReportEvent } from './latency/latency_report.entity';
import { LogsEvent } from './log.entity';
import { NarratedAction } from './narrated_action.entity';
import { OperationStatusEvent } from './operation_status.entity';
import { PacketId } from './packet_id.entity';
import { Routing } from './routing.entity';
import { SilenceEvent } from './silence.entity';
import { TaskEvent } from './task.entity';
import { TextEvent } from './text.entity';
import { TriggerEvent } from './trigger.entity';
export interface InworldPacketProps {
    audio?: AudioEvent;
    cancelResponses?: CancelResponsesEvent;
    control?: ControlEvent;
    task?: TaskEvent;
    trigger?: TriggerEvent;
    emotions?: EmotionEvent;
    log?: LogsEvent;
    silence?: SilenceEvent;
    packetId: PacketId;
    routing: Routing;
    text?: TextEvent;
    narratedAction?: NarratedAction;
    sceneMutation?: SceneMutation;
    entitiesItemsOperation?: ItemOperation;
    operationStatus?: OperationStatusEvent;
    latencyReport?: LatencyReportEvent;
    date: string;
    type: InworldPacketType;
    proto?: ProtoPacket;
}
export interface SceneMutation {
    name?: string;
    description?: string;
    displayName?: string;
    addedCharacterNames?: string[];
    removedCharacterIds?: string[];
    loadedCharacters?: Character[];
}
export declare class InworldPacket {
    private proto;
    private type;
    readonly date: string;
    readonly packetId: PacketId;
    readonly routing: Routing;
    readonly text: TextEvent;
    readonly audio: AudioEvent;
    readonly task: TaskEvent;
    readonly control: ControlEvent;
    readonly trigger: TriggerEvent;
    readonly emotions: EmotionEvent;
    readonly log: LogsEvent;
    readonly silence: SilenceEvent;
    readonly narratedAction: NarratedAction;
    readonly cancelResponses: CancelResponsesEvent;
    readonly sceneMutation: SceneMutation;
    readonly entitiesItemsOperation: ItemOperation;
    readonly operationStatus: OperationStatusEvent;
    readonly latencyReport: LatencyReportEvent;
    constructor(props: InworldPacketProps);
    getProto(): ProtoPacket.AsObject;
    isText(): boolean;
    isAudio(): boolean;
    isControl(): boolean;
    isTask(): boolean;
    isTrigger(): boolean;
    isEmotion(): boolean;
    isLog(): boolean;
    isInteractionEnd(): boolean;
    isTTSPlaybackMute(): boolean;
    isTTSPlaybackUnmute(): boolean;
    isWarning(): boolean;
    isSilence(): boolean;
    isCancelResponse(): boolean;
    isNarratedAction(): boolean;
    isSceneMutationRequest(): boolean;
    isSceneMutationResponse(): boolean;
    isEntitiesItemOperation(): boolean;
    isOperationStatus(): boolean;
    isLatencyReport(): boolean;
    isPingPongReport(): boolean;
    isPerceivedLatencyReport(): boolean;
    isSpeechRecognitionResult(): boolean;
    isPlayerTypeInText(): boolean;
    isNonSpeechPacket(): boolean;
    isPushToTalkAudioSessionStart(): boolean;
    isAudioSessionEnd(): boolean;
    shouldHaveConversationId(): boolean;
    static fromProto(proto: ProtoPacket): InworldPacket;
    private static getType;
}
